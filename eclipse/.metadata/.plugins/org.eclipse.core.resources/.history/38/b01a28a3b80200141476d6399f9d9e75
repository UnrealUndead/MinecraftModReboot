package com.unrealundead.modreboot;

import com.unrealundead.modreboot.handlers.ConfigHandler;
import com.unrealundead.modreboot.proxy.IProxy;
import com.unrealundead.modreboot.reference.GeneralRef;

import cpw.mods.fml.client.event.ConfigChangedEvent;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.eventhandler.SubscribeEvent;

@Mod(modid= GeneralRef.modId, name=GeneralRef.modName, version=GeneralRef.version, guiFactory = GeneralRef.guiFactory)
public class ModReboot 
{
	@Instance(GeneralRef.modId)
	public static ModReboot instance;//making a reference to your mod
	
	@SidedProxy(clientSide = GeneralRef.clientProxy, serverSide = GeneralRef.serverProxy)
	public static IProxy proxy;
	
	@EventHandler
	public void preInitialisation(FMLPreInitializationEvent event)
	{//used for configs, items, blocks		
		//using the Forge config class, see FMLPreInitializationEvent + F3
		ConfigHandler.initialize(event.getSuggestedConfigurationFile());
	}
	
	@EventHandler
	public void initialisation(FMLInitializationEvent event)
	{//used for gui, tile entities, crafting recipes, other general events
		ConfigHandler.registerOnChangedEvent(instance);
	}
	
	@EventHandler
	public void postInitialisation(FMLPostInitializationEvent event)
	{//used for wrap up
		
	}
	
}
